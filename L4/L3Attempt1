package com.company;

import edu.princeton.cs.introcs.StdOut;
import edu.princeton.cs.introcs.StdRandom;

public class Attempt1{
    private static Comparable[] pq;
    private static int N = 0;

    public static void MMM(int V) {
        MaxPQueue(V);
        StdOut.println("Исходная куча: ");
        for (int i = 0; i < V; i++) {//ввод значений
            int a = StdRandom.uniform(1,10);
            StdOut.print(a + " ");
            insert(a);
        }
    }

    public static void MaxPQueue(int V) { pq = new Comparable[V+1]; }//создание массива для кучи

    public static void insert(int v) {//втавка
        pq[++N] = v;//помещается в самый конец
        swim(N);//всплывает
    }

    public static Comparable delMin()  {//извлечение минимума
        Comparable min = pq[1];
        exch(1,N--);
        pq[N+1] = null;
        sink(1);
        return min;
    }

    private static void swim(int k) {//всплытие
        while (k>1 && more(k/2, k)) {
            exch(k/2, k);
            k = k/2;
        }
    }

    private static void sink(int k) {//погружение
        while (2*k <= N) {
            int j = 2*k;
            if (j<N && more(j, j+1)) j++;
            if (!more(k,j)) break;
            exch (k, j);
            k = j;
        }
    }

    protected static boolean more(int a, int b) { return pq[a].compareTo(pq[b]) > 0; }

    protected static void exch(int i, int j) {
        Comparable t = pq[i];
        pq[i] = pq[j];
        pq[j] = t;
    }

    public static void printQueue() {
        for (int i = 1; i < N+1; i++)
            StdOut.print(pq[i] + " ");
    }
}
