import edu.princeton.cs.introcs.StdOut;

public class W {
    public static void Prepare(Comparable[] a){
        int N = a.length;
        Comparable[] aShell = new Comparable[N];
        Comparable[] aInsertion = new Comparable[N];
        Comparable[] aSelection = new Comparable[N];
        Comparable[] aMerge = new Comparable[N];
        Comparable[] aQuick = new Comparable[N];
        for (int i = 0; i < N; i++){
            aInsertion[i] = a[i];
            aSelection[i] = a[i];
            aShell[i] = a[i];
            aMerge[i] = a[i];
            aQuick[i] = a[i];
        }

        String Z[] = new String[]{"Сортировка Шелла", "Сортировка вставками", "Сортировка выбором", "Сортировка слиянием", "Быстрая сортировка"};

        for (int i = 1; i <= 5; i++){
            long t1 = System.currentTimeMillis();
            long m1 = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();

            if (i == 1) Shell.sort(aShell);
            else if (i == 2) Insertion.sort(aInsertion);
            else if (i == 3) Selection.sort(aSelection);
            else if (i == 4) Merge.sort(aMerge);
            else if (i == 5) QuickSort.sort(aQuick);

            long t2 = System.currentTimeMillis() - t1;
            long m2 = (Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory()) - m1;

            StdOut.println(Z[i-1] + " заняла " + t2 + " мс, дополнительной памяти было задействоввано " + m2 + " байт");
        }
    }
}
